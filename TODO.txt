To-Do

* Automatic download and installation of dependencies

  * install_deps command (install runtime dependencies)

    * compute child command line, abort if user specified incompatible options

    * OPEN ISSUE: should parent install command include child install's files?

  * Dependency class

    * Check for presence/version via file existence, regular expression match,
      version comparison (using 'distutils.version' classes), installed on
      sys.path, or require just installation directory

    * Find appropriate release, or explain why not

    * Base URL(s) and distribution name

  * Release class

    * Distro type - source v. binary (determine via extension?)

    * Platform requirements, whether compiler needed (how can we check?)

    * Download URL, default from extension + dependency

    * Download + extract to target dir

    * run child install

  * build_deps command (install build-time dependencies)

* Build and install documentation sets

* Installation database similar to PEP 262

  * Needs to write file *before* installing anything, so an aborted install
    can be uninstalled.  Possibly should use 'unknown' for all metadata, then
    replace with real metadata once it's known.

  * REQUIRES should probably just be list of dependencies

* Bootstrap module

  The idea here is that you include the "bootstrap module" in your
  distribution, and it downloads the right version of setuptools automatically
  if a good-enough version isn't on sys.path.  This would let you use
  setuptools for your installer, without having to distribute the full
  setuptools package.  This would might look something like::

      from boot_setuptools import require_version
      require_version("0.6", "http://somewhere/setuptools-0.6.tar.gz")
      
      from setuptools import setup, Feature, findPackages
      # ...etc

